"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Switch } from "@/components/ui/switch"
import { Check } from 'lucide-react'

type Plan = {
  name: "Free" | "Basic" | "Pro"
  priceMonthly: number
  priceYearly: number // effective monthly rate when billed yearly
  blurb: string
  features: string[]
  highlighted?: boolean
  accent: string // tailwind gradient classes
}

const plans: Plan[] = [
  {
    name: "Free",
    priceMonthly: 0,
    priceYearly: 0,
    blurb: "Free forever",
    features: [
      "Basic AI‑generated designs",
      "Access to customization tools",
      "Standard templates library",
      "5 projects per month",
    ],
    accent: "from-zinc-500/20 to-zinc-400/10",
  },
  {
    name: "Basic",
    priceMonthly: 14.99,
    priceYearly: 11.99,
    blurb: "For individuals & small teams",
    features: [
      "Advanced AI‑generated designs",
      "Full customization tools",
      "Premium templates library",
      "Unlimited projects",
      "Real‑time collaboration",
      "Priority email support",
    ],
    highlighted: true,
    accent: "from-purple-600 to-indigo-600",
  },
  {
    name: "Pro",
    priceMonthly: 29.99,
    priceYearly: 23.99,
    blurb: "For studios & enterprises",
    features: [
      "All Basic features",
      "Dedicated account manager",
      "Custom AI solutions & designs",
      "Onboarding & training",
      "24/7 priority support",
      "Advanced analytics & reporting",
      "Secure cloud storage",
    ],
    accent: "from-sky-600 to-cyan-600",
  },
]

function formatUSD(n: number) {
  return n === 0 ? "$0" : `$${n.toFixed(n % 1 ? 2 : 0)}`
}

export function PricingShowcaseSection() {
  const [yearly, setYearly] = useState(false)

  return (
    <section className="px-4 py-20 md:py-28">
      <div className="mx-auto w-full max-w-5xl">
        {/* Heading */}
        <header className="mb-10 md:mb-12">
          <h2 className="text-3xl sm:text-4xl md:text-5xl font-bold tracking-tight">
            Affordable Plans for{" "}
            <span className="bg-gradient-to-r from-purple-600 to-indigo-600 dark:from-purple-400 dark:to-indigo-400 bg-clip-text text-transparent">
              Every Need
            </span>
          </h2>
          <p className="mt-4 max-w-3xl text-sm md:text-base text-muted-foreground">
            Choose the perfect plan for your design projects, from startups to enterprises. Our pricing tiers are
            designed for flexibility and value so you get the most out of our AI‑powered design assistant.
          </p>

          {/* Working billing toggle */}
          <div className="mt-5 flex items-center gap-3 text-sm">
            <span className={!yearly ? "font-medium" : "text-muted-foreground"}>Monthly</span>
            <Switch
              checked={yearly}
              onCheckedChange={setYearly}
              className="data-[state=checked]:bg-indigo-600 data-[state=unchecked]:bg-muted-foreground/40"
            />
            <span className={yearly ? "font-medium" : "text-muted-foreground"}>Yearly</span>
            {yearly && (
              <span className="ml-2 inline-flex items-center rounded-full bg-emerald-500/10 px-2 py-0.5 text-xs text-emerald-600 dark:text-emerald-400">
                Save up to 20%
              </span>
            )}
          </div>
        </header>

        {/* Cards */}
        <div className="grid gap-6 md:gap-8 md:grid-cols-3">
          {plans.map((plan) => {
            const isHighlight = plan.highlighted
            const price = yearly ? plan.priceYearly : plan.priceMonthly

            return (
              <article
                key={plan.name}
                className={[
                  "group glass-hover relative overflow-hidden rounded-2xl border bg-card/60 p-6 shadow-sm transition-all duration-300 hover:-translate-y-0.5 hover:shadow-lg",
                  "border-border/60 hover:border-border",
                  isHighlight ? "md:-translate-y-1 ring-1 ring-inset ring-purple-500/30" : "",
                ].join(" ")}
              >
                {/* Subtle glow rim */}
                <div
                  className={`pointer-events-none absolute -inset-px rounded-2xl opacity-0 blur-xl transition-opacity duration-500 group-hover:opacity-100 ${
                    isHighlight
                      ? "bg-gradient-to-br from-purple-600/15 to-indigo-600/15"
                      : "bg-gradient-to-br from-foreground/5 to-foreground/0"
                  }`}
                />

                {/* Accent top bar */}
                <div
                  className={`absolute inset-x-0 top-0 h-1.5 ${
                    isHighlight ? "bg-gradient-to-r " + plan.accent : "bg-border/60"
                  } rounded-t-2xl`}
                />

                {/* Badge for highlight */}
                {isHighlight && (
                  <div className="absolute right-4 top-4 rounded-full bg-gradient-to-r from-purple-600 to-indigo-600 px-3 py-1 text-xs font-medium text-white shadow-sm">
                    Popular
                  </div>
                )}

                {/* Shine sweep on hover */}
                <div className="pointer-events-none absolute -inset-1 translate-x-[-120%] rounded-2xl bg-[linear-gradient(110deg,transparent,rgba(255,255,255,0.12),transparent)] transition-transform duration-700 group-hover:translate-x-[120%]" />

                {/* Content */}
                <div className="relative z-10">
                  <div className="text-xs uppercase tracking-wider text-muted-foreground mb-2">{plan.name}</div>
                  <div className="mb-1 text-3xl font-bold tracking-tight">
                    {formatUSD(price)}
                    <span className="text-base font-medium text-muted-foreground">/m</span>
                  </div>
                  <div className="mb-5 text-xs text-muted-foreground">
                    {yearly ? "Billed yearly (effective monthly rate)" : "Billed monthly"} • {plan.blurb}
                  </div>

                  <hr className="mb-4 border-border/60" />

                  <ul className="space-y-3">
                    {plan.features.map((f, i) => (
                      <li key={i} className="flex items-start gap-2">
                        <span
                          className={`mt-0.5 inline-flex h-4 w-4 items-center justify-center rounded-full text-[10px] text-white ${
                            isHighlight ? "bg-gradient-to-br " + plan.accent : "bg-foreground/70"
                          }`}
                          aria-hidden="true"
                        >
                          <Check className="h-3 w-3" />
                        </span>
                        <span className="text-sm text-foreground/90">{f}</span>
                      </li>
                    ))}
                  </ul>

                  <div className="mt-6">
                    <Button
                      size="lg"
                      variant={isHighlight ? "default" : "outline"}
                      className={[
                        "w-full group/btn relative overflow-hidden",
                        isHighlight ? "bg-gradient-to-r " + plan.accent + " text-white border-0" : "border-2",
                      ].join(" ")}
                    >
                      <span className="relative z-10">{plan.name === "Free" ? "Start Free" : "Get Started"}</span>
                      <div className="pointer-events-none absolute inset-0 translate-x-[-120%] bg-[linear-gradient(110deg,transparent,rgba(255,255,255,0.18),transparent)] transition-transform duration-700 group-hover/btn:translate-x-[120%]" />
                    </Button>
                  </div>
                </div>
              </article>
            )
          })}
        </div>

        {/* Footnote */}
        <p className="mt-6 text-xs text-muted-foreground">Prices shown in USD. Taxes may apply. Cancel anytime.</p>
      </div>
    </section>
  )
}
"use client"

import type React from "react"
import { useEffect, useRef } from "react"
import { ArrowUpRight } from 'lucide-react'

type Tile = {
  title: string
  blurb: string
}

const tiles: Tile[] = [
  { title: "Increased Efficiency", blurb: "Automate time‑consuming steps and hit deadlines faster without compromising quality across deliverables." },
  { title: "Improved Accuracy", blurb: "Consistent, high‑quality renderings reduce manual errors and rework with precise visual outputs." },
  { title: "Enhanced Creativity", blurb: "Explore more variations and perspectives with intelligent prompts that expand your creative direction." },
  { title: "Saves Cost", blurb: "Shorter timelines and fewer revisions optimize budgets and increase overall project profitability." },
  { title: "Seamless Collaboration", blurb: "Share results easily and iterate with stakeholders using clear visuals and structured feedback loops." },
  { title: "Scales with Teams", blurb: "From solo designers to large studios—keep a consistent pipeline that adapts to your project load." },
]

function useInViewAnimation(container: React.RefObject<HTMLDivElement>) {
  useEffect(() => {
    const root = container.current
    if (!root) return
    const targets = Array.from(root.querySelectorAll("[data-animate-on-view]")) as HTMLElement[]
    const io = new IntersectionObserver(
      (entries) => {
        for (const entry of entries) {
          if (entry.isIntersecting) entry.target.classList.add("in-view")
        }
      },
      { threshold: 0.2 }
    )
    targets.forEach((el) => io.observe(el))
    return () => io.disconnect()
  }, [container])
}

export function RenderSeamlessGridSection() {
  const ref = useRef<HTMLDivElement>(null)
  useInViewAnimation(ref)

  return (
    <section className="px-4 py-20 md:py-28">
      <div className="mx-auto w-full max-w-5xl" ref={ref}>
        {/* Heading with reveal */}
        <div data-animate-on-view className="reveal grid gap-6 md:grid-cols-12 md:items-end md:gap-8 mb-8 md:mb-12">
          <h2 className="md:col-span-7 text-3xl sm:text-4xl md:text-5xl font-bold tracking-tight leading-tight">
            Render Seamlessly
            <br />
            from{" "}
            <span className="bg-gradient-to-r from-purple-600 to-indigo-600 dark:from-purple-400 dark:to-indigo-400 bg-clip-text text-transparent">
              Sketch to AI
            </span>
          </h2>
          <p className="md:col-span-5 text-sm md:text-base text-muted-foreground">
            Effortlessly turn sketches into high‑quality architectural visuals. These benefits keep your pipeline fast,
            accurate, and elegant.
          </p>
        </div>

        {/* Animated Grid */}
        <div className="grid gap-6 md:gap-8 sm:grid-cols-2 lg:grid-cols-3">
          {tiles.map((t, i) => (
            <article
              key={i}
              data-animate-on-view
              style={{ transitionDelay: `${i * 60}ms` }}
              className="reveal group glass-hover relative overflow-hidden rounded-2xl border border-border/60 bg-card/60 p-5 sm:p-6 shadow-sm transition-all duration-500 hover:-translate-y-0.5 hover:border-border hover:shadow-lg"
            >
              {/* soft gradient rim */}
              <div className="pointer-events-none absolute -inset-px rounded-2xl bg-gradient-to-br from-purple-500/10 to-indigo-500/10 opacity-0 blur-xl transition-opacity duration-500 group-hover:opacity-100" />
              {/* corner icon */}
              <div className="absolute right-4 top-4 inline-flex h-8 w-8 items-center justify-center rounded-full bg-gradient-to-br from-purple-600 to-indigo-600 text-white shadow-sm">
                <ArrowUpRight className="h-4 w-4" aria-hidden="true" />
              </div>
              {/* shine sweep on hover */}
              <div className="pointer-events-none absolute -inset-1 translate-x-[-120%] rounded-2xl bg-[linear-gradient(110deg,transparent,rgba(255,255,255,0.12),transparent)] transition-transform duration-700 group-hover:translate-x-[120%]" />

              <div className="relative z-10">
                <h3 className="text-lg sm:text-xl font-semibold tracking-tight">{t.title}</h3>
                <p className="mt-3 text-sm text-muted-foreground">{t.blurb}</p>
              </div>
            </article>
          ))}
        </div>
      </div>

      {/* Local styles for reveal transition */}
      <style>{`
        .reveal {
          opacity: 0;
          transform: translateY(14px) scale(0.985);
          transition: opacity 500ms ease, transform 500ms ease;
        }
        .reveal.in-view {
          opacity: 1;
          transform: translateY(0) scale(1);
        }
      `}</style>
    </section>
  )
}
/* Glassy card hover for both light and dark */
.glass {
  position: relative;
  overflow: hidden;
}
.glass::after {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: inherit;
  pointer-events: none;
  opacity: 0;
  transition: opacity 300ms ease;
  /* Light mode: stronger soft gradient, Dark mode overridden below */
  background: linear-gradient(135deg, rgba(255,255,255,0.55), rgba(255,255,255,0.18));
  mix-blend-mode: overlay;
}
.dark .glass::after {
  background: linear-gradient(135deg, rgba(255,255,255,0.06), rgba(255,255,255,0.03));
  mix-blend-mode: normal;
}
.glass:hover::after {
  opacity: 1;
}

/* Glassy hover overlay for both light and dark */
.glass-hover {
  position: relative;
  overflow: hidden;
}
.glass-hover::after {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: inherit;
  pointer-events: none;
  opacity: 0;
  transition: opacity 300ms ease;
  /* Light mode: stronger soft gradient overlay */
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.55), rgba(255, 255, 255, 0.18));
  mix-blend-mode: overlay;
}
.dark .glass-hover::after {
  /* Dark mode: gentle glass sheen */
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.06), rgba(255, 255, 255, 0.03));
  mix-blend-mode: normal;
}
.glass-hover:hover::after {
  opacity: 1;
}
